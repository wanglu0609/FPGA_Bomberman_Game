//----------------------------------------------------------------------------------------------------
// ( 24, 24)|( 72, 24)|(120, 24)|(168, 24)|(216, 24)|(264, 24)|(312, 24)|(360, 24)|(408, 24)|(456, 24)
// ( 24, 72)|( 72, 72)|(120, 72)|(168, 72)|(216, 72)|(264, 72)|(312, 72)|(360, 72)|(408, 72)|(456, 72)
// ( 24,120)|( 72,120)|(120,120)|(168,120)|(216,120)|(264,120)|(312,120)|(360,120)|(408,120)|(456,120)
// ( 24,168)|( 72,168)|(120,168)|(168,168)|(216,168)|(264,168)|(312,168)|(360,168)|(408,168)|(456,168)
// ( 24,216)|( 72,216)|(120,216)|(168,216)|(216,216)|(264,216)|(312,216)|(360,216)|(408,216)|(456,216)
// ( 24,264)|( 72,264)|(120,264)|(168,264)|(216,264)|(264,264)|(312,264)|(360,264)|(408,264)|(456,264)
// ( 24,312)|( 72,312)|(120,312)|(168,312)|(216,312)|(264,312)|(312,312)|(360,312)|(408,312)|(456,312)
// ( 24,360)|( 72,360)|(120,360)|(168,360)|(216,360)|(264,360)|(312,360)|(360,360)|(408,360)|(456,360)
// ( 24,408)|( 72,408)|(120,408)|(168,408)|(216,408)|(264,408)|(312,408)|(360,408)|(408,408)|(456,408)
// ( 24,456)|( 72,456)|(120,456)|(168,456)|(216,456)|(264,456)|(312,456)|(360,456)|(408,456)|(456,456)
//--------------------------------------------------------------------------------------------------

module Avatar (
	input Reset, Frame_Clk,
	input [15:0] Keycode,
	input [9:0] Avatar_X_Center, Avatar_Y_Center,
	output [9:0] Avatar_X, Avatar_Y, Avatar_S
);

	logic [9:0] Avatar_X_Pos, Avatar_X_Motion, Avatar_Y_Pos, Avatar_Y_Motion;
	logic [9:0] Avatar_X_Pos_In, Avatar_X_Motion_In, Avatar_Y_Pos_In, Avatar_Y_Motion_In;
	logic [5:0] Step_Count;
	logic Can_Right, Can_Left, Can_Up, Can_Down;

	parameter [9:0] Avatar_X_Min = 0;
	parameter [9:0] Avatar_X_Max = 479;
	parameter [9:0] Avatar_Y_Min = 0;
	parameter [9:0] Avatar_Y_Max = 479;
	parameter [9:0] Avatar_X_Step = 1;
	parameter [9:0] Avatar_Y_Step = 1;
	parameter [9:0] Avatar_Size = 36;

	int Init = 1'b1;
	int Ready = 1'b1;

	assign Avatar_X = Avatar_X_Pos;
	assign Avatar_Y = Avatar_Y_Pos;
	assign Avatar_S = Avatar_Size;

	always_ff @ (posedge Frame_Clk)
	begin
		if (Reset || Init)
		begin
			Init = 1'b0;
			Avatar_X_Pos <= Avatar_X_Center;
			Avatar_Y_Pos <= Avatar_Y_Center;
			Avatar_X_Motion <= 10'd0;
			Avatar_Y_Motion <= 10'd0;
			Step_Count <= 6'd0;
		end
		else
		begin
			if (Step_Count != 6'd48 || ~Ready)
			begin
				Avatar_X_Pos <= Avatar_X_Pos_In;
				Avatar_Y_Pos <= Avatar_Y_Pos_In;
				Avatar_X_Motion <= Avatar_X_Motion_In;
				Avatar_Y_Motion <= Avatar_Y_Motion_In;
				Step_Count <= Step_Count + 6'd1;
			end
			if (Ready)
			begin
				Ready = 1'b0;
				case (Keycode[7:0])
					8'h1a: // w (up)
						if (Can_Up)
						begin
							Avatar_X_Motion <= 10'd0; // always clear first
							if (Avatar_Y_Motion > 0) // going down
								Avatar_Y_Motion <= ~(Avatar_Y_Step) + 1'b1;  // 2's complement.
							else
								Avatar_Y_Motion <= Avatar_Y_Step; // keep motion
							if ( Avatar_Y_Pos <= (Avatar_Y_Min + Avatar_Size + Avatar_Y_Step) )  // Avatar is at the top edge, BOUNCE!
							begin
								Avatar_X_Motion <= 10'd0; // always clear first
								Avatar_Y_Motion <= Avatar_Y_Step; // keep motion
							end
						end
					8'h04: // a (left)
						if (Can_Left)
						begin
							Avatar_Y_Motion <= 10'd0; // always clear first
							if (Avatar_X_Motion > 0) // going right
								Avatar_X_Motion <= ~(Avatar_X_Step) + 1'b1;  // 2's complement.
							else
								Avatar_X_Motion <= Avatar_X_Step; // keep motion
							if ( Avatar_X_Pos <= (Avatar_X_Min + Avatar_Size + Avatar_X_Step) )  // Avatar is at the left edge, BOUNCE!
							begin
								Avatar_Y_Motion <= 10'd0; // always clear first
								Avatar_X_Motion <= Avatar_X_Step; // keep motion
							end
						end
					8'h16: // s (down)
						if (Can_Down)
						begin
							Avatar_X_Motion <= 10'd0; // always clear first
							if (Avatar_Y_Motion < 0) // going up
								Avatar_Y_Motion <= ~(Avatar_Y_Step) + 1'b1;  // 2's complement.
							else
								Avatar_Y_Motion <= Avatar_Y_Step; // keep motion
							if( (Avatar_Y_Pos + Avatar_Size + Avatar_Y_Step) >= Avatar_Y_Max )  // Avatar is at the bottom edge, BOUNCE!
							begin
								Avatar_X_Motion <= 10'd0; // always clear first
								Avatar_Y_Motion <= (~(Avatar_Y_Step) + 1'b1);  // 2's complement.  
							end
						end
					8'h07: // d (right)
						if (Can_Right)
						begin
							Avatar_Y_Motion <= 10'd0; // always clear first
							if (Avatar_X_Motion < 0) // going left
								Avatar_X_Motion <= ~(Avatar_X_Step) + 1'b1;  // 2's complement.
							else
								Avatar_X_Motion <= Avatar_X_Step; // keep motion
							if( (Avatar_X_Pos + Avatar_Size + Avatar_X_Step) >= Avatar_X_Max )  // Avatar is at the right edge, BOUNCE!
							begin
								Avatar_Y_Motion <= 10'd0; // always clear first
								Avatar_X_Motion <= (~(Avatar_X_Step) + 1'b1);  // 2's complement.  
							end
						end
				endcase
			end
		end
	end
endmodule
